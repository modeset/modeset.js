// displacement properties
var _range = _size / 4;
var _fric = .65;
var _accel = .4;

// displacement point class
var Point = function( x, y ) {
	var self = this;

	// base location
	this.x = x * (_size/1000);
	this.y = y * (_size/1000);
	
	// current location
	this.curX = this.x;
	this.curY = this.y;
	this.targetX = x;
	this.targetY = y;
	this.xspeed = 0;
	this.yspeed = 0;

	this.displaceAmount = 0;
	
	this.recalcDisplacement = function() {
		// calculate displacement based on mouse distance from point base
		var xdiff = self.x - _mouseX;
		var ydiff = self.y - _mouseY;
		var d = Math.sqrt( xdiff * xdiff + ydiff * ydiff );
		if ( d < _range ) {
			self.targetX = self.x - ( xdiff - _range * ( xdiff / d ) );
			self.targetY = self.y - ( ydiff - _range * ( ydiff / d ) );
		} else {
			self.targetX = self.x;
			self.targetY = self.y;
		}
		// elastically move based on current target poisition vs current position
		self.xspeed = ( ( self.targetX - self.curX ) * _accel + self.xspeed ) * _fric;
		self.yspeed = ( ( self.targetY - self.curY ) * _accel + self.yspeed ) * _fric;
		self.curX += self.xspeed;
		self.curY += self.yspeed;
		
		self.displaceAmount = Math.abs( self.curX - self.x ) + Math.abs( self.curY - self.y );
		self.displaceDir = ( self.curX - self.x ) + ( self.curY - self.y );
	};
}
