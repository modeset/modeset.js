package de.nd.audi.f09.modules.buzz.util{	import flash.text.TextField;	/**	 * Utility functions for manipulating text strings. 	 *  	 * <p>Description</p> 	 *  	 * <p>Copyright 2009 by Factory Design Labs, All Rights Reserved.</p> 	 * <a href="http://www.factorylabs.com/">www.factorylabs.com</a> 	 *  	 * @author		stevenkish 	 * @version		1.0.0 :: Aug 18, 2009 	 */	public class StringUtil 	{/* * PROPERTIES**************************************************************************************************** */				private static const ELLIPSE:String = '...';		/* * INTERNAL ACCESS**************************************************************************************************** */		/* * PUBLIC ACCESS**************************************************************************************************** */				/**		 * Cleans string for tracking		 */		public static function cleanForTracking( textToClean:String ):String		{			textToClean = textToClean.replace( ' ', '_' );			textToClean = escape( textToClean );			if( textToClean.length > 30 ) textToClean = textToClean.substr( 0, 30 ); 			return textToClean;		}				/**		 * Puts commas in between every 3rd number		 */		public static function formatNumber(number:Number):String		{			var nStr:String = number.toString();			var x:Array = nStr.split('.');			var x1:String = x[0];			var x2:String = ( x.length > 1 ) ? '.' + x[1] : '';			var rgx:RegExp = /(\d+)(\d{3})/;			while ( rgx.test(x1) )			{				x1 = x1.replace(rgx, '$1' + ',' + '$2');			}			return x1 + x2;		}								/**		 *  Ellipses text		 */		public static function ellipseText( textToEllipse:String, characterLimit:int, useWholeWords:Boolean=true ):String		{			var str : String = textToEllipse;						// no text, no continue			if ( str == null ) return textToEllipse;			// no need to parse text if text length is less than character limit			if ( str.length <= characterLimit ) return textToEllipse;						// slice text to character limit			str =  str.slice(0, characterLimit);						// trim off fragmented words and additional spaces			if( useWholeWords ) str = str.substring(0, str.lastIndexOf(' '));						// take out any ending commas			if ( str.charAt(str.length - 1) == ',' ) str = str.substring(0, str.length - 1);						// add ellipse string			return str + ELLIPSE;		}				/**		 *  Ellipses single-line textfield based on width 		 */		public static function ellipseSingleLineTextField( textfield:TextField, charX:Number = 0, charY:Number = 5 ):void		{			var limitPosition:int = textfield.getCharIndexAtPoint( charX, charY );						if( limitPosition == -1 ) return;						// find number of characters that are part of html tags			var numTagChars:int = 0;			var linkOpens:Array = ArrayUtil.getIndexesOfArray( textfield.htmlText, "<" );			var linkCloses:Array = ArrayUtil.getIndexesOfArray( textfield.htmlText, ">" );						for( var i:int = 0; i < linkOpens.length; i++ )			{				numTagChars += linkCloses[i] - linkOpens[i];			}			if( numTagChars > 0 ) numTagChars = numTagChars / 2;						textfield.htmlText = ellipseText( textfield.htmlText, limitPosition - 1 + numTagChars );		}				/* * EVENT HANDLING**************************************************************************************************** */	}}