%div.demo_info
  %h1 FpsTimeFactor demo
  %div Runs alongside a local timer, keeping track of actual FPS vs. target FPS, giving us a "time factor" to multiply values that should be independent of actual FPS.
%div.demo_holder
  %div.controls_ui.right_side
  %div.anim_container
%div.demo_controls
  %h2 Controls
  %div.controls_ui.status


:javascript
  var Demo = function(){

    var _timeFactor = null;
    var TARGET_FPS = 30;
    var FPS_MS = 1000 / TARGET_FPS;

    // set styles on containers to run the demo
    var prepContainers = function() {
      $('div.anim_container').css({
        position:'relative',
        height:'400px',
        width:'400px',
        backgroundColor:'#ccc'
      });
    };

    // init the demo
    var initDemo = function() {
      _timeFactor = new FpsTimeFactor( TARGET_FPS );
      runTimer();
    };

    var _config = {
      fps: FPS_MS
   };

    // tweak demo vars
    var setUpControls = function(){
      // init DAT_GUI
      _gui = new dat.GUI({ autoPlace: false });
      document.getElementsByClassName('controls_ui')[0].appendChild(_gui.domElement);
      $('.controls_ui .close-button').remove();

      // add FPS control
      var fpsVal = _gui.add(_config, 'fps', 10, 100);
      fpsVal.listen();
      fpsVal.onChange(function(value) { _timeFactor.setFps(value); });
    };

    // frame loop
    var runTimer = function(){
      _timeFactor.update();
      $('.controls_ui.status').html( 'Target FPS: ' + Math.round(1000/_config.fps) + '<br/>Actual FPS: ' + _timeFactor.getActualFps() + '<br/>Time Factor: ' + MathUtil.roundToDecimal( _timeFactor.getTimeFactor(), 1 ) );
      // setTimeout(function(){ runTimer(); },FPS_MS);

      if( window.requestAnimationFrame ) {
          window.requestAnimationFrame( runTimer );
      } else {
          setTimeout( function() { runTimer(); }, FPS_MS );
      }
    };
    
    // fire up demo
    $(document).ready(function() {
      prepContainers();
      initDemo();
      setUpControls();
    });
  }();
